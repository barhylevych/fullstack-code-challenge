version: "3.6"
services:
  db:
    image: postgres:latest
    restart: unless-stopped
    volumes:
      - database_data:/var/lib/postgresql/data
    networks:
      - backend_network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", $POSTGRES_USER, "-d", $POSTGRES_DB]
      interval: 5s
      timeout: 5s
      retries: 5
    env_file:
      - .env
    ports:
      - "5433:5432"

  backend:
    build:
      context: ./backend
      dockerfile: ./backend/Prod.Dockerfile
    image: backend
    ports:
      - "80:80"
    restart: always
    environment:
      NODE_ENV: development
      PORT: 80
      PGSQL_USER: $POSTGRES_USER
      PGSQL_PASSWORD: $POSTGRES_PASSWORD
      PGSQL_PORT: $POSTGRES_PORT
      PGSQL_HOST: "db"
      PGSQL_DATABASE: $POSTGRES_DB
    volumes:
      - ./backend/:/app
    depends_on:
      db:
        condition: service_healthy
      migration:
        condition: service_started
    networks:
      - backend_network
    env_file:
      - .env

  migration:
    build:
      context: ./backend
      dockerfile: ./backend/Prod.Dockerfile
    command:
      ["npm", "run", "db:migrate"]
    depends_on:
      - db
    networks:
      - backend_network
    environment:
      PGSQL_USER: $POSTGRES_USER
      PGSQL_PASSWORD: $POSTGRES_PASSWORD
      PGSQL_PORT: $POSTGRES_PORT
      PGSQL_HOST: "db"
      PGSQL_DATABASE: $POSTGRES_DB

networks:
  backend_network:
    driver: bridge
volumes:
  database_data:
